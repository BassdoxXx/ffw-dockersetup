services:
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    restart: unless-stopped
    command: tunnel run --token ${CF_TUNNEL_TOKEN}
    env_file:
      - .env
    networks:
      - core_net
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  vaultwarden:
    image: vaultwarden/server:latest
    container_name: vaultwarden
    restart: unless-stopped
    volumes:
      - ./data/vaultwarden:/data
    environment:
      - WEBSOCKET_ENABLED=true
      - SIGNUPS_ALLOWED=false
    networks:
      - core_net
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 1m30s
      timeout: 10s
      retries: 3

  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    restart: unless-stopped
    volumes:
      - ./configs/homepage:/app/config
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - HOMEPAGE_ALLOWED_HOSTS=home.ffw-windischletten.de
    networks:
      - core_net
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  simple_invites:
    image: bassdoxxx/simple_invites:latest
    container_name: simple_invites
    restart: unless-stopped
    ports:
      - "5000:5000"
    volumes:
      - ./data/simple_invites:/app/instance
    environment:
      - FLASK_ENV=production
      - SECRET_KEY=dein_geheimer_schluessel
      - APP_HOSTNAME=https://invites.ffw-windischletten.de
      - PDF_CLEANUP_MINUTES=30
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    networks:
      - core_net
      
  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_LABEL_ENABLE=true
      - WATCHTOWER_POLL_INTERVAL=18000
      
    networks:
      - core_net

  crowdsec:
    image: crowdsecurity/crowdsec:latest
    container_name: crowdsec
    restart: always
    environment:
      - COLLECTIONS=crowdsecurity/traefik crowdsecurity/http-cve crowdsecurity/base-http-scenarios crowdsecurity/sshd crowdsecurity/linux crowdsecurity/appsec-generic-rules crowdsecurity/appsec-virtual-patching crowdsecurity/appsec-crs
    depends_on:
      - 'cloudflared'
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./configs/crowdsec/data:/var/lib/crowdsec/data
      - ./docker_test_whoami/data/traefik/logs:/var/log/traefik:ro
    networks:
      - core_net
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      # - "traefik.enable=true"
      # - "traefik.http.routers.crowdsec-rtr.rule=Host(`crowdsec.srv-docker-1.home`)"
      # - "traefik.http.routers.crowdsec-rtr.tls=true"
      # - "traefik.http.routers.crowdsec-rtr.tls.certresolver=local"
      # - "traefik.http.routers.crowdsec-rtr.service=crowdsec-svc"
      # - "traefik.http.services.crowdsec-svc.loadbalancer.server.port=6060"
      # - "traefik.http.routers.crowdsec-rtr.middlewares=basicauth3"

  engelsystem:
    build: 
      context: ./app/engelsystem
      dockerfile: docker/Dockerfile
    container_name: engelsystem
    restart: unless-stopped
    environment:
      MYSQL_TYPE: mariadb
      MYSQL_HOST: engelsystem_db
      MYSQL_USER: engelsystem
      MYSQL_PASSWORD: engelsystem
      MYSQL_DATABASE: engelsystem
      ENVIRONMENT: production
      APP_URL: https://helfer.ffw-windischletten.de
    volumes:
      - ./data/engelsystem/config:/var/www/html/config
      - ./data/engelsystem/storage:/var/www/html/storage
      - ./data/engelsystem/resources:/var/www/html/resources
    networks:
      - core_net
    depends_on:
      - engelsystem_db
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      
  engelsystem_db:
    image: mariadb:10.7
    container_name: engelsystem_db
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: engelsystem
      MYSQL_USER: engelsystem
      MYSQL_PASSWORD: engelsystem
      MYSQL_RANDOM_ROOT_PASSWORD: "1"
      MYSQL_INITDB_SKIP_TZINFO: "yes"
    volumes:
      - ./data/engelsystem/db:/var/lib/mysql
    networks:
      - core_net

  postgres:
    image: postgres:15
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./data/db/postgres:/var/lib/postgresql/data
    networks:
      - core_net
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

networks:
  core_net:
    external: true