services:
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    restart: unless-stopped
    command: tunnel run --token ${CF_TUNNEL_TOKEN}
    env_file:
      - .env
    volumes:
      - ./data/cloudflared:/etc/cloudflared  # Explizites Mapping f端r Cloudflared-Konfiguration
    networks:
      - core_net
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  vaultwarden:
    image: vaultwarden/server:latest
    container_name: vaultwarden
    restart: unless-stopped
    volumes:
      - ./data/vaultwarden:/data
    environment:
      - WEBSOCKET_ENABLED=true
      - SIGNUPS_ALLOWED=false
    networks:
      - core_net
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 1m30s
      timeout: 10s
      retries: 3

  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    restart: unless-stopped
    volumes:
      - ./configs/homepage:/app/config
      - ./data/homepage:/app/data    # Explizites Mapping f端r Homepage-Daten
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - HOMEPAGE_ALLOWED_HOSTS=home.ffw-windischletten.de
    networks:
      - core_net
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  simple_invites:
    image: bassdoxxx/simple_invites:latest
    container_name: simple_invites
    restart: unless-stopped
    ports:
      - "5000:5000"
    volumes:
      - ./data/simple_invites:/app/instance
    environment:
      - FLASK_ENV=production
      - SECRET_KEY=${SIMPLE_INVITES_SECRET_KEY}
      - APP_HOSTNAME=https://invites.example.org
      - PDF_CLEANUP_MINUTES=30
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    networks:
      - core_net

  immich-server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    volumes:
      - ${UPLOAD_LOCATION}:/data
      - /etc/localtime:/etc/localtime:ro
    environment:
      - TZ=${TZ}
      - DB_HOSTNAME=immich-database
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE_NAME=${DB_DATABASE_NAME}
      - REDIS_HOSTNAME=immich-redis
      # OAuth Configuration:
      - OAUTH_ENABLED=true
      - OAUTH_ISSUER_URL=https://auth.ffw-windischletten.de/application/o/immich/
      - OAUTH_CLIENT_ID=immich
      - OAUTH_CLIENT_SECRET=${IMMICH_OAUTH_SECRET}
      - OAUTH_SCOPE=openid profile email
      - OAUTH_AUTO_REGISTER=true
      - OAUTH_AUTO_LAUNCH=false
    env_file:
      - .env
    depends_on:
      - immich-redis
      - immich-database
    restart: always
    networks:
      - core_net
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "traefik.enable=true"
      - "traefik.http.routers.immich-rtr.entrypoints=https"
      - "traefik.http.routers.immich-rtr.rule=Host(`pics.ffw-windischletten.de`)"
      - "traefik.http.routers.immich-rtr.service=immich-svc"
      - "traefik.http.services.immich-svc.loadbalancer.server.port=2283"
      - "traefik.http.routers.immich-rtr.tls.certResolver=production"
      - "traefik.http.routers.immich-rtr.middlewares=crowdsec"
      - "traefik.http.services.immich-svc.loadbalancer.passhostheader=true"
    healthcheck:
      disable: false

  immich-machine-learning:
    container_name: immich_machine_learning
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    volumes:
      - ./data/immich/model-cache:/cache
    environment:
      - TZ=${TZ}
      # Auch hier Redis-Hostname setzen:
      - REDIS_HOSTNAME=immich-redis
    env_file:
      - .env
    restart: always
    networks:
      - core_net
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    healthcheck:
      disable: false

  immich-redis:
    container_name: immich_redis
    image: docker.io/valkey/valkey:8-bookworm@sha256:5b8f8c333bef895c925f56629d6ba90aea95a4f7391f62411e625267c600b19c
    restart: always
    networks:
      - core_net
    volumes:
      - ./data/immich/redis:/data
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    healthcheck:
      test: redis-cli ping || exit 1

  immich-database:
    container_name: immich_postgres
    image: ghcr.io/immich-app/postgres:14-vectorchord0.4.3-pgvectors0.2.0@sha256:32324a2f41df5de9efe1af166b7008c3f55646f8d0e00d9550c16c9822366b4a
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      POSTGRES_INITDB_ARGS: '--data-checksums'
      TZ: ${TZ}
    volumes:
      - ${DB_DATA_LOCATION}:/var/lib/postgresql/data
    shm_size: 128mb
    restart: always
    networks:
      - core_net
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      
  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data/watchtower:/var/lib/watchtower  # Explizites Mapping f端r Watchtower-Daten
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_LABEL_ENABLE=true
      - WATCHTOWER_POLL_INTERVAL=3600
    networks:
      - core_net




  engelsystem:
    build: 
      context: ./app/engelsystem
      dockerfile: docker/Dockerfile
    container_name: engelsystem
    restart: unless-stopped
    environment:
      MYSQL_TYPE: mariadb
      MYSQL_HOST: engelsystem_db
      MYSQL_USER: engelsystem
      MYSQL_PASSWORD: engelsystem
      MYSQL_DATABASE: engelsystem
      ENVIRONMENT: production
      APP_URL: https://helfer.ffw-windischletten.de
    volumes:
      - ./data/engelsystem/config:/var/www/html/config
      - ./data/engelsystem/storage:/var/www/html/storage
      - ./data/engelsystem/resources:/var/www/html/resources
    networks:
      - core_net
    depends_on:
      - engelsystem_db
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      
  engelsystem_db:
    image: mariadb:10.7
    container_name: engelsystem_db
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: engelsystem
      MYSQL_USER: engelsystem
      MYSQL_PASSWORD: engelsystem
      MYSQL_RANDOM_ROOT_PASSWORD: "1"
      MYSQL_INITDB_SKIP_TZINFO: "yes"
    volumes:
      - ./data/engelsystem/db:/var/lib/mysql
    networks:
      - core_net

  whoami:
    image: containous/whoami
    container_name: whoami
    restart: unless-stopped
    volumes:
      - ./data/whoami:/data
    networks:
      - core_net
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "traefik.enable=true"
      - "traefik.http.routers.whoami-rtr.entrypoints=https"
      - "traefik.http.routers.whoami-rtr.rule=Host(`test.ffw-windischletten.de`)"
      - "traefik.http.routers.whoami-rtr.service=whoami-svc"
      - "traefik.http.services.whoami-svc.loadbalancer.server.port=80"
      - "traefik.http.routers.whoami-rtr.tls.certResolver=production"
      - "traefik.http.routers.whoami-rtr.middlewares=crowdsec"

  crowdsec:
    image: crowdsecurity/crowdsec:latest
    container_name: crowdsec
    restart: always
    environment:
      COLLECTIONS: "crowdsecurity/traefik crowdsecurity/http-cve crowdsecurity/base-http-scenarios crowdsecurity/sshd crowdsecurity/linux crowdsecurity/appsec-generic-rules crowdsecurity/appsec-virtual-patching crowdsecurity/appsec-crs"
    depends_on:
      - 'cloudflared'
    expose:
      - 8080
      - 6060
      - 7422
    volumes:
      - ./configs/crowdsec/config/acquis.yaml:/etc/crowdsec/acquis.yaml:ro
      - ./configs/crowdsec/data:/var/lib/crowdsec/data
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./data/traefik/logs:/var/log/traefik:ro
    networks:
      - core_net
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  traefik:
    image: traefik:v3.5.0
    container_name: traefik
    restart: always
    ports:
      - "80:8111"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./configs/traefik:/etc/traefik/dynamic/
      - ./data/traefik/acme:/acme
      - ./data/traefik/logs:/logs
      - ./data/traefik/plugins:/plugins
    command:
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:8111
      - --entryPoints.https.address=:443
      - --entryPoints.http.forwardedHeaders.trustedIPs=127.0.0.1/32,172.18.0.0/16,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,104.16.0.0/13,104.24.0.0/14,108.162.192.0/18,131.0.72.0/22,141.101.64.0/18,162.158.0.0/15,172.64.0.0/13,173.245.48.0/20,188.114.96.0/20,190.93.240.0/20,197.234.240.0/22,198.41.128.0/17,2400:cb00::/32,2606:4700::/32,2803:f800::/32,2405:b500::/32,2405:8100::/32,2a06:98c0::/29,2c0f:f248::/32
      - --entryPoints.https.forwardedHeaders.trustedIPs=127.0.0.1/32,172.18.0.0/16,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,104.16.0.0/13,104.24.0.0/14,108.162.192.0/18,131.0.72.0/22,141.101.64.0/18,162.158.0.0/15,172.64.0.0/13,173.245.48.0/20,188.114.96.0/20,190.93.240.0/20,197.234.240.0/22,198.41.128.0/17,2400:cb00::/32,2606:4700::/32,2803:f800::/32,2405:b500::/32,2405:8100::/32,2a06:98c0::/29,2c0f:f248::/32
      # HTTP -> HTTPS Redirect hinzuf端gen:
      - --entryPoints.http.http.redirections.entrypoint.to=https
      - --entryPoints.http.http.redirections.entrypoint.scheme=https
      - --entryPoints.http.http.redirections.entrypoint.permanent=true
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.exposedByDefault=false
      - --providers.file=true
      - --providers.file.directory=/etc/traefik/dynamic
      - --providers.file.watch=true
      - --serverstransport.insecureskipverify=true
      - --experimental.plugins.bouncer.modulename=github.com/maxlerebourg/crowdsec-bouncer-traefik-plugin
      - --experimental.plugins.bouncer.version=v1.4.1
      - --log.level=WARN # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/logs/access.log
      - --accesslog.format=json
      - --accessLog.bufferingSize=100
      # - --accessLog.filters.statusCodes=204-299,400-499,500-599
      - --accesslog.fields.defaultmode=keep
      - --accesslog.fields.headers.defaultmode=keep
      - --accesslog.fields.headers.names.User-Agent=keep
      - --accesslog.fields.headers.names.Referer=keep
      - --log.maxsize=50
      - --log.maxbackups=3
      - --log.maxage=7
      #Zertifikate
      - --certificatesResolvers.staging.acme.dnschallenge=true
      - --certificatesResolvers.staging.acme.storage=/acme/staging.json
      - --certificatesResolvers.staging.acme.dnschallenge.provider=cloudflare
      - --certificatesResolvers.staging.acme.email=ffwindischletten@gmail.com
      - --certificatesResolvers.staging.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesResolvers.staging.acme.dnschallenge.resolvers=fatima.ns.cloudflare.com:53,matt.ns.cloudflare.com:53
      - --certificatesResolvers.production.acme.dnschallenge=true
      - --certificatesResolvers.production.acme.storage=/acme/letsencrypt.json
      - --certificatesResolvers.production.acme.dnschallenge.provider=cloudflare
      - --certificatesResolvers.production.acme.email=ffwindischletten@gmail.com
      - --certificatesResolvers.production.acme.caServer=https://acme-v02.api.letsencrypt.org/directory
      - --certificatesResolvers.production.acme.dnschallenge.resolvers=fatima.ns.cloudflare.com:53,matt.ns.cloudflare.com:53
      #SSL
    environment:
      - CLOUDFLARE_EMAIL=${CLOUDFLARE_EMAIL}
      - CLOUDFLARE_API_KEY=${CLOUDFLARE_API_KEY}
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "traefik.enable=true"
      # CROWDSEC LABELS:
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.enabled=true"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.crowdsecLapiKey=${CROWDSEC_LAPI_KEY}"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.crowdsecMode=live"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.crowdsecAppsecEnabled=true"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.crowdsecAppsecHost=crowdsec:7422"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.crowdsecLapiHost=crowdsec:8080"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.crowdsecLapiScheme=http"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.crowdsecLapiTLSInsecureVerify=false"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.crowdsecAppsecFailureBlock=false"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.crowdsecAppsecUnreachableBlock=false"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.defaultDecisionSeconds=60"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.forwardedHeadersTrustedIPs=127.0.0.1/32,172.18.0.0/16"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.clientTrustedIPs=127.0.0.1/32,172.18.0.0/16"

    networks:
      - core_net

  authentik-server:
    image: ghcr.io/goauthentik/server:${AUTHENTIK_VERSION:-latest}
    container_name: authentik_server
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: authentik-redis
      AUTHENTIK_POSTGRESQL__HOST: authentik-database
      AUTHENTIK_POSTGRESQL__USER: ${AUTHENTIK_DB_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${AUTHENTIK_DB_NAME}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${AUTHENTIK_DB_PASSWORD}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_ERROR_REPORTING__ENABLED: true
    volumes:
      - ./data/authentik/media:/media
      - ./data/authentik/custom-templates:/templates
    env_file:
      - .env
    depends_on:
      - authentik-database
      - authentik-redis
    networks:
      - core_net
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "traefik.enable=true"
      - "traefik.http.routers.authentik-rtr.entrypoints=https"
      - "traefik.http.routers.authentik-rtr.rule=Host(`auth.ffw-windischletten.de`)"
      - "traefik.http.routers.authentik-rtr.service=authentik-svc"
      - "traefik.http.services.authentik-svc.loadbalancer.server.port=9000"
      - "traefik.http.routers.authentik-rtr.tls.certResolver=production"
      - "traefik.http.routers.authentik-rtr.middlewares=crowdsec"

  authentik-worker:
    image: ghcr.io/goauthentik/server:${AUTHENTIK_VERSION:-latest}
    container_name: authentik_worker
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: authentik-redis
      AUTHENTIK_POSTGRESQL__HOST: authentik-database
      AUTHENTIK_POSTGRESQL__USER: ${AUTHENTIK_DB_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${AUTHENTIK_DB_NAME}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${AUTHENTIK_DB_PASSWORD}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
    volumes:
      - ./data/authentik/media:/media
      - ./data/authentik/custom-templates:/templates
      - ./data/authentik/certs:/certs
    env_file:
      - .env
    depends_on:
      - authentik-database
      - authentik-redis
    networks:
      - core_net
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  authentik-database:
    image: postgres:12-alpine
    container_name: authentik_postgres
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: ${AUTHENTIK_DB_PASSWORD}
      POSTGRES_USER: ${AUTHENTIK_DB_USER}
      POSTGRES_DB: ${AUTHENTIK_DB_NAME}
    volumes:
      - ./data/authentik/database:/var/lib/postgresql/data
    networks:
      - core_net
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  authentik-redis:
    image: redis:alpine
    container_name: authentik_redis_auth
    restart: unless-stopped
    command: --save 60 1 --loglevel warning
    volumes:
      - ./data/authentik/redis:/data
    networks:
      - core_net
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

networks:
  core_net:
    external: true